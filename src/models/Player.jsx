/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/character.glb
*/

import React, { useEffect, useRef } from "react";
import { useGLTF, useAnimations, useKeyboardControls } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import { usePlayerPosStore } from "../stores";

import * as THREE from "three";

// import {
//   useBox,
//   useCompoundBody,
//   useCylinder,
//   usePlane,
//   useSphere,
// } from "@react-three/cannon";

// import * as THREE from "three";

// const SPEED = 5;
// const direction = new THREE.Vector3();
// const frontVector = new THREE.Vector3();
// const sideVector = new THREE.Vector3();
// const rotation = new THREE.Vector3();

export function Player(props) {
  const ref = useRef();
  const playerSpeed = 10;

  let upVector = new THREE.Vector3(0, 1, 0);
  let tempVector = new THREE.Vector3();

  const { nodes, materials, animations } = useGLTF("/character.glb");
  const { actions } = useAnimations(animations, ref);

  // const [playerPos, setPlayerPos] = usePlayerPosStore((state) => [
  //   state.playerPos,
  //   state.updatePlayerPos,
  // ]);

  // TODO: Keyboard
  const forwardPressed = useKeyboardControls((state) => state.forward);
  const backwardPressed = useKeyboardControls((state) => state.backward);
  const leftPressed = useKeyboardControls((state) => state.left);
  const rightPressed = useKeyboardControls((state) => state.right);

  // const { controls } = useThree();
  // const angle = controls.azimuthAngle;

  // useEffect(() => {
  //   // console.log(forwardPressed);
  //   console.log(angle);

  //   if (forwardPressed) {
  //     tempVector.set(0, 0, -1).applyAxisAngle(upVector, angle);
  //     const newPos = playerPos.addScaledVector(tempVector, playerSpeed * delta);
  //     setPlayerPos(newPos);
  //   }
  //   if (backwardPressed) {
  //     const newPos = [playerPos[0] - 1, playerPos[1], playerPos[2]];
  //     setPlayerPos(newPos);
  //   }
  //   if (leftPressed) {
  //     const newPos = [playerPos[0], playerPos[1], playerPos[2] + 1];
  //     setPlayerPos(newPos);
  //   }
  //   if (rightPressed) {
  //     const newPos = [playerPos[0], playerPos[1], playerPos[2] - 1];
  //     setPlayerPos(newPos);
  //   }

  //   // console.log(playerPos);
  // }, [forwardPressed, backwardPressed, leftPressed, rightPressed]);

  useFrame((state, delta) => {
    // Player Movement

    // ref.current.position.x += delta;
    if (forwardPressed) {
      tempVector
        .set(0, 0, -1)
        .applyAxisAngle(upVector, state.controls.azimuthAngle);
      ref.current.position.addScaledVector(tempVector, playerSpeed * delta);
    }
    if (backwardPressed) {
      tempVector
        .set(0, 0, 1)
        .applyAxisAngle(upVector, state.controls.azimuthAngle);
      ref.current.position.addScaledVector(tempVector, playerSpeed * delta);
    }
    if (leftPressed) {
      tempVector
        .set(-1, 0, 0)
        .applyAxisAngle(upVector, state.controls.azimuthAngle);
      ref.current.position.addScaledVector(tempVector, playerSpeed * delta);
    }
    if (rightPressed) {
      tempVector
        .set(1, 0, 0)
        .applyAxisAngle(upVector, state.controls.azimuthAngle);
      ref.current.position.addScaledVector(tempVector, playerSpeed * delta);
    }

    state.controls.moveTo(...ref.current.position, true);
  });

  // const [sub, get] = useKeyboardControls();
  // useFrame((state) => {
  //   // const { forward, backward, left, right, jump } = get();
  //   const pressed = get().back;
  // });

  return (
    <group ref={ref} {...props} dispose={null}>
      <group name="Armature" scale={0.01} rotation={[Math.PI / 2, 0, 0]}>
        <primitive object={nodes.mixamorigHips} />
        <skinnedMesh
          name="Ch46"
          geometry={nodes.Ch46.geometry}
          material={materials.Ch46_body}
          skeleton={nodes.Ch46.skeleton}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/character.glb");

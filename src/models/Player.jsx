/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/character.glb
*/

import React, { forwardRef, useEffect, useRef, useState } from "react";
import {
  useGLTF,
  useAnimations,
  useKeyboardControls,
  useHelper,
} from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import { usePlayerPosStore } from "../stores";

import * as THREE from "three";
// import { MeshBVHVisualizer } from "three-mesh-bvh";

// const TAU = Math.PI * 2;

// function normalizeAngle(angle) {
//   return THREE.MathUtils.euclideanModulo(angle, TAU);
// }

export const Player = forwardRef((props, pref) => {
  const playerSpeed = 10;

  let upVector = new THREE.Vector3(0, 1, 0);
  let tempVector = new THREE.Vector3();
  // let cameraPos = new THREE.Vector3();

  const { nodes, materials, animations } = useGLTF("/character.glb");
  const { actions, names } = useAnimations(animations, pref);

  // const [playerPos, setPlayerPos] = usePlayerPosStore((state) => [
  //   state.playerPos,
  //   state.updatePlayerPos,
  // ]);

  // DONE: Keyboard
  const forwardPressed = useKeyboardControls((state) => state.forward);
  const backwardPressed = useKeyboardControls((state) => state.backward);
  const leftPressed = useKeyboardControls((state) => state.left);
  const rightPressed = useKeyboardControls((state) => state.right);

  const { camera, controls } = useThree();

  useEffect(() => {
    if (forwardPressed || backwardPressed || leftPressed || rightPressed) {
      actions[names[0]].reset().fadeIn(0.5).play();
    }
    return () => actions[names[0]].fadeOut(0.5);
  }, [
    forwardPressed,
    backwardPressed,
    leftPressed,
    rightPressed,
    actions,
    names,
  ]);

  useFrame((state, delta) => {
    // Player Movement
    if (forwardPressed) {
      tempVector.set(0, 0, -1).applyAxisAngle(upVector, controls.azimuthAngle);
      pref.current.position.addScaledVector(tempVector, playerSpeed * delta);
    }
    if (backwardPressed) {
      tempVector.set(0, 0, 1).applyAxisAngle(upVector, controls.azimuthAngle);
      pref.current.position.addScaledVector(tempVector, playerSpeed * delta);
    }
    if (leftPressed) {
      // tempVector.set(-1, 0, 0).applyAxisAngle(upVector, controls.azimuthAngle);
      // pref.current.position.addScaledVector(tempVector, playerSpeed * delta);
      pref.current.rotateY(Math.PI / 18);
    }
    if (rightPressed) {
      // tempVector.set(1, 0, 0).applyAxisAngle(upVector, controls.azimuthAngle);
      // pref.current.position.addScaledVector(tempVector, playerSpeed * delta);
      pref.current.rotateY(-Math.PI / 18);
    }

    controls.moveTo(...pref.current.position, true);
    // console.log(camera.position.clone().multiplyScalar(-1));
    // pref.current.lookAt(camera.position.clone().negate());
  });

  // const [sub, get] = useKeyboardControls();
  // useFrame((state) => {
  //   // const { forward, backward, left, right, jump } = get();
  //   const pressed = get().back;
  // });

  return (
    <group ref={pref} {...props} dispose={null}>
      <group name="Armature" scale={0.03} rotation={[Math.PI / 2, 0, 0]}>
        <primitive object={nodes.mixamorigHips} />
        <skinnedMesh
          name="Ch46"
          geometry={nodes.Ch46.geometry}
          material={materials.Ch46_body}
          skeleton={nodes.Ch46.skeleton}
        />
      </group>
    </group>
  );
});

useGLTF.preload("/character.glb");

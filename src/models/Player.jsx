/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/character.glb
*/

import React, { forwardRef, useEffect, useRef, useState } from "react";
import {
  useGLTF,
  useAnimations,
  useKeyboardControls,
  useHelper,
} from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";

import * as THREE from "three";

const playerSpeed = 10;

const upVector = new THREE.Vector3(0, 1, 0);
const tempVector = new THREE.Vector3();

export const Player = forwardRef((props, pref) => {
  const { nodes, materials, animations } = useGLTF("/player.glb");
  const { actions, names } = useAnimations(animations, pref);

  const { visible } = props;
  const forwardPressed = useKeyboardControls((state) => state.forward);
  const backwardPressed = useKeyboardControls((state) => state.backward);
  const leftPressed = useKeyboardControls((state) => state.left);
  const rightPressed = useKeyboardControls((state) => state.right);

  const { controls } = useThree();

  useEffect(() => {
    if (visible) {
      // console.log(names);
      // actions[names[0]].reset().fadeIn(0.1).play();
      actions[names[0]].reset().fadeIn(0.1).play();
      return () => actions[names[1]].fadeOut(2);
    }
  }, [forwardPressed, backwardPressed, leftPressed, rightPressed, names]);

  useFrame((state, delta) => {
    // Player Movement
    if (forwardPressed) {
      tempVector.set(0, 0, -1).applyAxisAngle(upVector, controls.azimuthAngle);
      pref.current.position.addScaledVector(tempVector, playerSpeed * delta);
    }
    if (backwardPressed) {
      tempVector.set(0, 0, 1).applyAxisAngle(upVector, controls.azimuthAngle);
      pref.current.position.addScaledVector(tempVector, playerSpeed * delta);
    }
    if (leftPressed) {
      pref.current.rotateY(Math.PI / 360);
    }
    if (rightPressed) {
      pref.current.rotateY(-Math.PI / 360);
    }
    // if (visible) {
    //   controls.moveTo(pref.current.position.x + 1, pref.current.position.y + 6, pref.current.position.z + 1, true);
    // }
    // console.log(camera.position.clone().multiplyScalar(-1));
    // pref.current.lookAt(camera.position.clone().negate());
  });

  return (
    <group ref={pref} {...props} dispose={null}>
      <group name="Armature003" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
        <primitive object={nodes.mixamorigHips} />
        <skinnedMesh
          name="Ch46001"
          geometry={nodes.Ch46001.geometry}
          material={materials["Ch46_body.001"]}
          skeleton={nodes.Ch46001.skeleton}
        />
      </group>
    </group>
  );
});

useGLTF.preload("/player.glb");

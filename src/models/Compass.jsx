/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/compass.glb
*/

import React, { forwardRef, useEffect, useRef, useState } from "react";
import { Html, TransformControls, useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { Button } from "antd";

export const Compass = forwardRef((props, cref) => {
  const c = useRef();

  const { isCompass, player } = props;
  const [isCircle, toggleIsCircle] = useState(true);
  const { nodes, materials } = useGLTF("/compass.glb");

  const [cirlPos, setCirlPos] = useState(-0.45);
  const [declRot, setDeclRot] = useState(8);
  // const [cirlPos, setCirlPos] = useStore((state) => [
  //   state.currentCirlPos,
  //   state.updateCurrentCirlPos,
  // ]);

  // const decl = useRef();
  // const [declRot, setDeclRot] = useStore((state) => [
  //   state.currentDeclRot,
  //   state.updateCurrentDeclRot,
  // ]);

  useFrame((state, delta) => {
    if (isCompass) {
      c.current.position.set(
        player.current.position.x + 0.5,
        player.current.position.y + 4,
        player.current.position.z + 0.5
      );

      if (!isCircle) {
        state.controls.setLookAt(
          c.current.position.x,
          c.current.position.y + 0.14,
          c.current.position.z - 0.8,
          ...c.current.position,
          true
        );

        // state.controls.setPosition(
        //   c.current.position.x,
        //   c.current.position.y + 0.14,
        //   c.current.position.z - 0.8,
        //   true
        // );
        // // console.log(cref.current.rotation);
        // TODO
        state.controls.rotate(-(cref.current.rotation.z % Math.PI), 0, true);

        // console.log(cref.current.rotation.z);
        // console.log(cref.current.rotation.z % Math.PI);
      }

      if (isCircle) {
        state.controls.setLookAt(
          c.current.position.x,
          c.current.position.y + 0.5,
          c.current.position.z - 0.3,
          ...c.current.position,
          true
        );
        // console.log(c.current.position);
        // state.controls.rotate(-(cref.current.rotation.z % Math.PI), 0, true);

        // console.log(cref.current.rotation.z);
        // console.log(cref.current.rotation.z % Math.PI);

        // state.controls.setPosition(
        //   c.current.position.x,
        //   c.current.position.y + 0.5,
        //   c.current.position.z,
        //   true
        // );

        // state.controls.lookInDirectionOf(0, -1, 0.4);
        // console.log(c.current.position);
      }
    }
  });

  return (
    <group {...props} dispose={null} ref={c}>
      {isCompass && (
        <Html>
          <Button type="primary" onClick={() => toggleIsCircle(!isCircle)}>
            {isCircle ? "观测" : "读数"}
          </Button>
        </Html>
      )}
      <group rotation={[1.55, 0, 0]}>
        <mesh
          geometry={nodes.compass_needle_met_gl2.geometry}
          material={materials.met_gl2}
          position={[0, -0.02, -1.17]}
          rotation={[-0.02, -0.03, -1.58]}
        />
        <group ref={cref}>
          <mesh
            geometry={nodes.compass_circle_steklo.geometry}
            material={materials.steklo}
            position={[0, 0, -1.31]}
            scale={[1.73, 1.73, 0.01]}
            rotation={[0, 0, (Math.PI / 360) * declRot]}
            // onClick={() => {
            //   props.setRot(props.rot + 5);
            // }}
            // onContextMenu={() => {
            //   props.setRot(props.rot - 5);
            // }}
          />
          <mesh
            geometry={nodes.compass_north_hrom.geometry}
            material={materials.hrom}
            rotation={[0, 0, -0.01]}
          />
          <group position={[0, -5.79, -1.34]} rotation={[1.3, 0, 0.01]}>
            <mesh geometry={nodes.Mesh017.geometry} material={materials.hrom} />
            <mesh
              geometry={nodes.Mesh017_1.geometry}
              material={materials.blek_mat}
            />
          </group>
          <mesh
            onClick={() => setCirlPos(cirlPos - 0.05)}
            geometry={nodes.level_circular_steklo.geometry}
            material={materials.trans}
            position={[0.84, cirlPos, -1.02]}
            scale={[0.14, 0.14, 0.12]}
          >
            {/* DONE: Alert */}
            {/* {currentStep === 1 && (
              <Html distanceFactor={3}>
                <Alert
                  type="info"
                  message="圆水准仪"
                  style={{ minWidth: "70px", padding: 5 }}
                />
              </Html>
            )} */}
          </mesh>
          <mesh
            geometry={nodes.level_tubular_steklo.geometry}
            material={materials.trans}
            position={[0.56 + cirlPos, -0.94, -0.97]}
            scale={[0.16, 0.14, 0.12]}
          >
            {/* DONE: Alert */}
            {/* {currentStep === 1 && (
              <Html distanceFactor={3}>
                <Alert
                  type="info"
                  message="长水准仪"
                  style={{ minWidth: "70px", padding: 5 }}
                />
              </Html>
            )} */}
          </mesh>
          {/* DONE: Magnetic Declination*/}
          <mesh
            // ref={decl}
            onClick={() => setDeclRot(declRot + 0.5)}
            geometry={nodes.magnetic_declination_blekc_gl.geometry}
            material={materials.blekc_gl}
            position={[1.62, 1.65, -1.03]}
            rotation={[-Math.PI / declRot, -Math.PI / declRot, 0]}
          >
            {/* DONE: Alert */}
            {/* {currentStep === 0 && (
              <Html distanceFactor={3}>
                <Alert
                  type="info"
                  message="刻度螺旋"
                  style={{ minWidth: "70px", padding: 5 }}
                />
              </Html>
            )} */}
          </mesh>
          <group
            position={[0, 2.24, -1.53]}
            rotation={[1.46, 1.56, -2.27]}
            scale={[0.05, 0.05, 1.02]}
          >
            <mesh geometry={nodes.Mesh020.geometry} material={materials.hrom} />
            <mesh
              geometry={nodes.Mesh020_1.geometry}
              material={materials.blekc_gl}
            />
            <mesh
              geometry={nodes.Mesh020_2.geometry}
              material={materials.zerkalo}
            />
            <mesh
              geometry={nodes.Mesh020_3.geometry}
              material={materials.blek_mat}
            />
            <mesh
              geometry={nodes.Mesh020_4.geometry}
              material={materials.haki}
            />
          </group>
          <mesh
            geometry={nodes.pCylinder37_hrom_0.geometry}
            material={materials.hrom}
            position={[0, -2.31, -1.51]}
            rotation={[0.01, Math.PI / 2, 0]}
            scale={[0.05, 0.05, 0.96]}
          />
          <mesh
            geometry={nodes.pCylinder55_hrom_0.geometry}
            material={materials.hrom}
            position={[1.61, 1.27, -1.39]}
            scale={[0.11, 0.11, 0.21]}
          />
          <mesh
            geometry={nodes.pCylinder57_hrom_0.geometry}
            material={materials.hrom}
            position={[0, 0, 0.08]}
          />
          <mesh
            geometry={nodes.pCylinder61_hrom_0.geometry}
            material={materials.hrom}
          />
          <mesh
            geometry={nodes.polySurface217_blek_mat_0.geometry}
            material={materials.blek_mat}
          />
          <mesh
            geometry={nodes.polySurface253_lambert1_0.geometry}
            material={materials.lambert1}
            position={[0, -0.17, 0]}
          />
          <mesh
            geometry={nodes.polySurface253_met_gl2_0.geometry}
            material={materials.met_gl2}
            position={[0, -0.17, 0]}
          />
          <mesh
            geometry={nodes.polySurface267_blek_mat_0.geometry}
            material={materials.blek_mat}
          />
          <mesh
            geometry={nodes.polySurface267_haki_0.geometry}
            material={materials.haki}
          />
          <mesh
            geometry={nodes.polySurface267_met_gl2_0.geometry}
            material={materials.met_gl2}
          />
          <mesh
            geometry={nodes.polySurface267_salatov_0.geometry}
            material={materials.salatov}
          />
          <mesh
            geometry={nodes.polySurface267_steklo_0.geometry}
            material={materials.steklo}
          />
          <mesh
            geometry={nodes.polySurface64_blek_mat_0.geometry}
            material={materials.blek_mat}
            position={[0, -0.02, 0.03]}
            rotation={[0.01, 0, 0]}
          />
        </group>
      </group>
    </group>
  );
});

useGLTF.preload("/compass.glb");
